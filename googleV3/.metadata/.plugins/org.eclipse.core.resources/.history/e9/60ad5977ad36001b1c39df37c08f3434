package jp.co.elifes.pwrapid.app.login;

import java.net.URI;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import com.github.dozermapper.core.Mapper;
import jp.co.elifes.pwrapid.domain.common.message.MessageKeys;
import jp.co.elifes.pwrapid.domain.service.login.RecaptchaResult;
import jp.co.elifes.pwrapid.domain.service.login.RecaptchaV3Input;
import jp.co.elifes.pwrapid.domain.service.login.RecaptchaV3Output;
import jp.co.elifes.pwrapid.domain.service.login.RecaptchaV3Service;

/**
 * Handles requests for the application home page.
 */
@Controller
@RequestMapping("/login")
public class LoginController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoginController.class);

    @Inject
    Mapper beanMapper;

    @Inject
    private RecaptchaV3Service recaptchaV3Service;

    @Value("${google.api.recaptchav3.param.render}")
    private String recaptchaSiteKey;

    @Value("${google.api.recaptchav3.js}")
    private String recaptchav3Js;

    @Autowired
    MessageSource messageSource;

    @Value("${google.api.recaptchav3.url}")
    private String recaptchav3Url;

    @Value("${google.api.recaptchav3.param.secret}")
    private String secret;

    @Value("${google.api.recaptchav3.result.threshold}")
    private float threshold;

    @Value("${google.api.recaptchav3.error.locktime}")
    private int locktime;

    /**
     * 初期表示.
     * @param model ロケール情報.
     * @return
     */
    @RequestMapping(value = {"", "/"}, method = RequestMethod.GET)
    public String init(Model model) {
        LoginForm loginForm = new LoginForm();
        String apiJs = recaptchav3Js + "?render=" + recaptchaSiteKey;
        loginForm.setRecaptchaSiteKey(recaptchaSiteKey);
        loginForm.setRecaptchav3Js(apiJs);
        model.addAttribute("loginForm", loginForm);
        model.addAttribute("recaptchaSiteKey", recaptchaSiteKey);
        return "login/login";
    }

    /**
     * ロボットlをチェック.
     *
     * @param request request
     * @param req req
     * @param model model
     * @return
     */
    @RequestMapping(value = "/validate", method = RequestMethod.POST)
    @ResponseBody
    public Map<String, Object> login(HttpServletRequest request, @RequestBody LoginForm req,
            Model model) {
        RecaptchaV3Input input = new RecaptchaV3Input();
        input.setRecaptchaResponse(req.getRecaptchaResponse());
//        RecaptchaV3Output output = recaptchaV3Service.doRecaptchaV3Output(input);
        RecaptchaV3Output output = doRecaptchaV3Output(input);
        Map<String, Object> reslutMap = new HashMap<String, Object>();
        reslutMap.put("result", output);
        return reslutMap;
    }

    /**
     * 登録失敗の場合.
     *
     * @param model model
     * @return
     */
    @RequestMapping(value = "/badCredentials", method = RequestMethod.GET)
    public String badCredentials(Model model) {
        LoginForm output = new LoginForm();
        List<String> messages = new ArrayList<String>();
        output.setResultNo(100);
        messages.add(
                messageSource.getMessage(MessageKeys.E_PW_LOGIN_6002.key(), null, Locale.JAPAN));
        output.setMessages(messages);
        model.addAttribute("loginForm", output);
        return "login/login";
    }

    private RecaptchaV3Output doRecaptchaV3Output(RecaptchaV3Input input) {

        RecaptchaV3Output output = new RecaptchaV3Output();
        List<String> messages = new ArrayList<String>();
        try {
            RestTemplate restTemplate = new RestTemplate();

            RequestEntity<String> requestEntity = RequestEntity.post(URI.create(recaptchav3Url))
                    .contentType(new MediaType(MediaType.APPLICATION_FORM_URLENCODED,
                            Charset.forName("utf-8")))
                    .body(createRequestBody(input));

            RecaptchaResult result = restTemplate.postForObject(recaptchav3Url, requestEntity,
                    RecaptchaResult.class);

            if (result.isSuccess()) {
                if (threshold <= result.getScore()) {
                    // ロボットではない、
                    output.setRobot(false);
                    output.setResultNo(0);
                } else {

                    messages.add(messageSource.getMessage(MessageKeys.E_PW_LOGIN_0001.key(), null,
                            Locale.JAPAN));
                    output.setMessages(messages);
                    output.setResultNo(100);
                    output.setRobot(true);
                    LocalDateTime unlockDtByRecaptcha = LocalDateTime.now().plusSeconds(locktime);
                    output.setUnlockDtByRecaptcha(unlockDtByRecaptcha);
                }
            } else {
                messages.add(messageSource.getMessage(MessageKeys.E_PW_LOGIN_0002.key(), null,
                        Locale.JAPAN));
                output.setMessages(messages);
                output.setResultNo(100);
                LocalDateTime unlockDtByRecaptcha = LocalDateTime.now().plusSeconds(locktime);
                output.setUnlockDtByRecaptcha(unlockDtByRecaptcha);
            }
        } catch (Exception e) {

            messages.add(messageSource.getMessage(MessageKeys.E_PW_LOGIN_0002.key(), null,
                    Locale.JAPAN));
            output.setMessages(messages);
            output.setResultNo(100);
            LocalDateTime unlockDtByRecaptcha = LocalDateTime.now().plusSeconds(locktime);
            output.setUnlockDtByRecaptcha(unlockDtByRecaptcha);
        }
        return output;
    }

    /**
     * RequestBodyを作成.
     *
     * @param input input
     * @return
     */
    private String createRequestBody(RecaptchaV3Input input) {
        StringBuilder sb = new StringBuilder();
        sb.append("secret=").append(secret).append("&");
        sb.append("response=").append(input.getRecaptchaResponse()).append("");
        return sb.toString();
    }
}
